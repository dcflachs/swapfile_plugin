#!/bin/sh

determine_filesystem_recurive()
{
  if [ ! -d $1 ] ; then
    determine_filesystem_recurive $(dirname $1)
  else
    echo `stat -f -c %T $1`
    return
  fi
}

set_swappiness()
{
  if [ -n "$SWAPPINESS_NEW" ]; then
    logit "Setting swappiness to ${SWAPPINESS_NEW}"
    sysctl vm.swappiness=${SWAPPINESS_NEW}
  fi
  return
}

#################
# L O G I T
#################
logit()
{
  logger -trc.swapfile -plocal7.info -is "$1"
  echo "$1"
}

#################
# W R I T E C F G
#################
write_cfg()
{
  echo "# Swap File plugin configuration" > ${SWAP_PLUGIN_PATH}/swapfile.cfg

  echo "SWAP_ENABLE_ON_BOOT=\"$SWAP_ENABLE_ON_BOOT\"" >> ${SWAP_PLUGIN_PATH}/swapfile.cfg
  echo "SWAP_DELETE=\"$SWAP_DELETE\"" >> ${SWAP_PLUGIN_PATH}/swapfile.cfg
  echo "SWAP_LOCATION=\"$SWAP_LOCATION\"" >> ${SWAP_PLUGIN_PATH}/swapfile.cfg
  echo "SWAP_FILENAME=\"$SWAP_FILENAME\"" >> ${SWAP_PLUGIN_PATH}/swapfile.cfg
  echo "SWAP_NAME=\"$SWAP_NAME\"" >> ${SWAP_PLUGIN_PATH}/swapfile.cfg
  echo "SWAP_SIZE_MB=\"$SWAP_SIZE_MB\"" >> ${SWAP_PLUGIN_PATH}/swapfile.cfg
  echo "SWAPPINESS=\"$SWAPPINESS\"" >> ${SWAP_PLUGIN_PATH}/swapfile.cfg

  logit "Plugin configuration written"
}

#################
# S T A R T
#################
swapfile_start()
{
  # Check if swap file exists
  if [ -f ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} ]; then
    SWAP_RUNNING=$(swapon -s | grep ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} | cut -d" " -f1)
    # Check if swap file already started
    if [ "$SWAP_RUNNING" == "${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW}" ] ; then
      logit "Swap file ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} already started"
    # Swap file not started
    else
      if [ `stat -f -c %T ${SWAP_LOCATION_NEW}` == "btrfs" ]; then
        #Swapfile is on a btrfs filesystem
        if [ `stat --format=%i ${SWAP_LOCATION_NEW}` == "256" ]; then
          #Swapfile is in a btrfs subvolume
          if [ $(lsattr -l ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} | grep -c No_COW) -ne 0 ]; then
            #Swapfile has No_COW
            if [ $(btrfs property get ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} compression | grep -c compression) -ne 0 ]; then
              logit "Swap file ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} is on a BTRFS file system but has compression enabled."
              return
            fi
          else
            logit "Swap file ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} is on a BTRFS file system but does not have the No_COW attribute."
            return
          fi
        else
          logit "Swap file ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} is on a BTRFS file system but not in a subvolume."
          return
        fi
      fi

      # Turn on swap file usage
      swapon -v ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW}
      logit " Swap file ${SWAP_LOCATION}/${SWAP_FILENAME} re-used and started"
    fi
  # Swap file does not exist
  else
    # Check if requested swapfile location exists
    if [ ! -d ${SWAP_LOCATION_NEW} ] ; then
      fstype=$(determine_filesystem_recurive ${SWAP_LOCATION_NEW})
      if [ "$fstype" == "btrfs" ] ; then
        # Create the directory above the swapfile directory
        mkdir --parents $(dirname ${SWAP_LOCATION_NEW})

        #Create a subvolume for the swapfile
        btrfs subvolume create ${SWAP_LOCATION_NEW}

        #Turn off Copy-on-Write for swapfile
        chattr -R +C ${SWAP_LOCATION_NEW}
      else
       # Create swap file location including parents if they don't exist
       mkdir --parents ${SWAP_LOCATION_NEW}
      fi
    fi

    if [ `stat -f -c %T ${SWAP_LOCATION_NEW}` == "btrfs" ]; then
      #Swapfile is on a btrfs filesystem
      if [ `stat --format=%i ${SWAP_LOCATION_NEW}` != "256" ]; then
        #Swapfile is not in a btrfs subvolume
        logit "Swap file ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} is on a BTRFS file system but not in a subvolume."
        return
      fi
    fi

    # Create swap file
    logit "Creating swap file ${SWAP_LOCATION}/${SWAP_FILENAME} please wait ..."

    # https://manpages.ubuntu.com/manpages/kinetic/en/man8/swapon.8.html
    # Preallocated files created by fallocate(1) may be interpreted as files with holes too
    # depending of the filesystem. Preallocated swap files are supported on XFS since Linux
    # 4.18.

    fsType=$(df ${SWAP_LOCATION_NEW} --output=fstype | sed '1d')
    if [ $fsType == 'xfs' ]; then # FS supported
      CurrV=$(uname -r)
      ExpecV='4.18'
      printf -v versions '%s\n%s' "$ExpecV" "$CurrV"
      if [ $versions == $(sort -V <<< "$versions") ]; then # Above Kernel version 4.18
        fallocate -l ${SWAP_SIZE_MB_NEW}M ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} || allocation_failed=1
      else
        use_dd=1 # fall back
      fi
    else
      use_dd=1 # fall back
    fi

    if [ ${allocation_failed:-0} -eq 1 ]; then
      logit "fallocate failed, falling back to dd"
      rm ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW}
      use_dd=1 # fall back
    fi

    if [ $use_dd == 1 ]; then
      dd if=/dev/zero of=${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} bs=1M count=${SWAP_SIZE_MB_NEW}
    fi

    if [ `stat -f -c %T ${SWAP_LOCATION_NEW}` == "btrfs" ]; then
      #Turn off compression on swapfile
      btrfs property set ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} compression none
    fi

    # Assign SWAP_NAME to the swap file
    mkswap -L ${SWAP_NAME_NEW} ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW}
    # Change swap file permissions as required
    chmod 600 ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW}
    # Turn on swap file usage
    swapon -v ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW}
    logit "Swap file ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} created and started"
  fi

  set_swappiness
}

#################
# S T O P
#################
swapfile_stop()
{
  # Check if swap file assigned and in use
  SWAP_RUNNING=$(swapon -s | grep ${SWAP_LOCATION}/${SWAP_FILENAME} | cut -d" " -f1)
  if [ "$SWAP_RUNNING" == "${SWAP_LOCATION}/${SWAP_FILENAME}" ] ; then
    # Turn off swap file usage
    swapoff -v ${SWAP_LOCATION}/${SWAP_FILENAME}
    logit "Swap file ${SWAP_LOCATION}/${SWAP_FILENAME} stopped"
  else
    logit "Swap file ${SWAP_LOCATION}/${SWAP_FILENAME} not running - Nothing to stop"
  fi
  if [ -f ${SWAP_LOCATION}/${SWAP_FILENAME} ] ; then
    if [ "$SWAP_DELETE" == "true" ] ; then
      rm --force ${SWAP_LOCATION}/${SWAP_FILENAME}
      logit "Swap file ${SWAP_LOCATION}/${SWAP_FILENAME} removed"
    else
      logit "Swap file ${SWAP_LOCATION}/${SWAP_FILENAME} not removed"
    fi
  else
    logit "Swap file ${SWAP_LOCATION}/${SWAP_FILENAME} does not exist"
  fi
}

#################
# R E S T A R T
#################
swapfile_restart()
{
  swapfile_stop
  sleep 3
  swapfile_start
}

###################
# B O O T
###################
swapfile_boot()
{
  # Check if swap file should be started during array mount
  if [ $SWAP_ENABLE_ON_BOOT == "true" ] ; then
    logit "Starting swap file during array mount ..."
    swapfile_start
  else
    logit "Swap file start during array mount is disabled"
  fi
}

###################
# M A I N
###################

[ -f /boot/config/plugins/swapfile/swapfile.cfg ] && source /boot/config/plugins/swapfile/swapfile.cfg

# Swapfile plugin folder on boot flash drive
SWAP_PLUGIN_PATH="/boot/config/plugins/swapfile"

# Copy below parameters for swapfile_start() function - uses "NEW" parameters
SWAP_LOCATION_NEW=$SWAP_LOCATION
SWAP_FILENAME_NEW=$SWAP_FILENAME
SWAP_NAME_NEW=$SWAP_NAME
SWAP_SIZE_MB_NEW=$SWAP_SIZE_MB
SWAPPINESS_NEW=$SWAPPINESS

if [ $1 == "updatecfg" ] ; then
  SWAP_ENABLE_ON_BOOT=$2
  SWAP_DELETE=$3
  SWAP_LOCATION_NEW=$4
  SWAP_FILENAME_NEW=$5
  SWAP_NAME_NEW=$6
  SWAP_SIZE_MB_NEW=$7
  SWAPPINESS_NEW=$8

  # Check if swap file exists
  if [ -f ${SWAP_LOCATION}/${SWAP_FILENAME} ]; then
    # Save "SWAP_DELETE" parameter value
    SWAP_DELETE_SAVE=$SWAP_DELETE
    # Check if swap file location of filename changed
    if [ "${SWAP_LOCATION}/${SWAP_FILENAME}" !=  "${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW}" ] || [ "$SWAP_NAME" != "$SWAP_NAME_NEW" ] || [ "$SWAP_SIZE_MB" != "$SWAP_SIZE_MB_NEW" ] ; then
      logit "New swap file configuration is being implemented"
      # Enable deletion of existing swap file (if exists)
      SWAP_DELETE="true"
      # Restart swap file with new configuration (STOP uses "OLD" parameters and "START" uses "NEW" parameters
      SWAP_RUNNING=$(swapon -s | grep ${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW} | cut -d" " -f1)
      # Check if swap file already started
      if [ "$SWAP_RUNNING" == "${SWAP_LOCATION_NEW}/${SWAP_FILENAME_NEW}" ] ; then
        # Recreate and restart swap file
        logit "Restarting swap file with new configuration ..."
        swapfile_restart
      #Swap file not running
      else
        # Just remove existing swap file - will be recreated on next start
        logit "Removing previous existing swap file ..."
        swapfile_stop
      fi
    fi
    # Restore "SWAP_DELETE" parameter value
    SWAP_DELETE=$SWAP_DELETE_SAVE
  fi

  if [ "$SWAPPINESS" != "$SWAPPINESS_NEW" ]; then
    set_swappiness
  fi

  SWAP_LOCATION=$SWAP_LOCATION_NEW
  SWAP_FILENAME=$SWAP_FILENAME_NEW
  SWAP_NAME=$SWAP_NAME_NEW
  SWAP_SIZE_MB=$SWAP_SIZE_MB_NEW
  SWAPPINESS=$SWAPPINESS_NEW

  write_cfg
else
  case "$1" in
    'start')
      swapfile_start
    ;;
    'stop')
      swapfile_stop
    ;;
    'restart')
      swapfile_restart
    ;;
    'writecfg')
      write_cfg
    ;;
    'boot')
      swapfile_boot
    ;;

    *)
      echo "usage $0 start | stop | restart | updatecfg | writecfg"
  esac
fi
